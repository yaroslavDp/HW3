(()=>{"use strict";class e{constructor(e,t,r,n,a,s,i){this.id=e,this.name=t,this.birthYear=r,this.gender=n,this.height=a,this.mass=s,this.homeworld=i.includes("1",30)?"Tatooine":"Naboo"}render(e){const t=document.createElement("div"),r=document.querySelector(".characters__list .container");t.classList.add("character__item");const n=`<p class='character__item-descr'>Occupation: JEDI</p>\n                   <p class='character__item-descr'>Light Saber: ${e}</p>`;t.innerHTML=`\n      <h2 class='character__item-subtitle'>${this.name}</h2>\n      <p class='character__item-descr'>Height: ${this.height} cm</p>\n      <p class='character__item-descr'>Mass: ${this.mass} kg</p>\n      <p class='character__item-descr'>Birth Year: ${this.birthYear}</p>\n      <p class='character__item-descr'>Homeworld: ${this.homeworld}</p>\n    `,e&&(t.innerHTML=t.innerHTML+n),r.append(t)}}class t extends e{constructor(e,t,r,n,a,s,i,c){super(e,t,r,n,a,s,i,i),this.lightsaberColor=c}render(e){super.render(e)}}class r{constructor(e){this.message=e}display(){const e=document.createElement("div");return e.classList.add("error"),e.innerHTML=`\n      <p>Error: ${this.message}</p>\n    `,e}}const n="https://swapi.dev/api";class a{async charGetAll(){const a=document.querySelector(".characters__list .container");a.innerHTML="",a.innerHTML='<p class="loading-text">Loading....</p>',async function(){const e=await fetch(`${n}/people/`);if(!e.ok)throw new r("Error getting all characters");return await e.json()}().then((r=>{a.innerHTML="",r.results.forEach((({id:r,name:n,birth_year:a,gender:s,height:i,mass:c,homeworld:o})=>{"Luke Skywalker"==n||"Obi-Wan Kenobi"==n?new t(r,n,a,s,i,c,o,"blue").render("blue"):new e(r,n,a,s,i,c,o).render()}))})).catch((e=>{a.innerHTML="",a.appendChild(e.display())}))}async charSearchById(){const a=document.querySelector(".characters__list .container"),s=document.querySelector(".search-input");document.querySelector(".search-form").addEventListener("submit",(async i=>(i.preventDefault(),s.value.trim()?isNaN(s.value)?(a.innerHTML="",a.appendChild(new r("Error input must be a number").display()),null):(async function(e){const t=await fetch(`${n}/people/${e}`);if(!t.ok)throw new r("Error getting one character");return await t.json()}(+s.value).then((r=>{a.innerHTML="";const{id:n,name:s,birth_year:i,gender:c,height:o,mass:d,homeworld:l}=r;"Luke Skywalker"==s||"Obi-Wan Kenobi"==s?new t(n,s,i,c,o,d,l,"blue").render("blue"):new e(n,s,i,c,o,d,l).render()})).catch((e=>{a.innerHTML="",a.appendChild(e.display())})),void(s.value="")):(a.innerHTML="",a.appendChild(new r("Error not valid input").display()),null))))}async updCharacter(){const e=document.querySelector(".character-details__result"),t=document.querySelector(".update-form__input");document.querySelector(".update-form").addEventListener("submit",(async function(n){if(n.preventDefault(),e.classList.remove("success"),!t.value.trim())return e.innerText="",e.appendChild(new r("Error not valid input").display()),null;isNaN(t.value)?(e.innerText="Loading...",await async function(e,t){return await new Promise((function(e,r){setTimeout((()=>e(`Charachter with ID: 1 successfully updated with data ${t}`)),2e3)}))}(0,t.value).then((t=>{e.innerText="",e.classList.add("success"),e.innerText=t}))):(e.innerText="",e.appendChild(new r("Error input must be a string").display())),t.value=""}))}}window.addEventListener("DOMContentLoaded",(function(){const e=new a;e.charGetAll(),e.charSearchById(),e.updCharacter()}))})();